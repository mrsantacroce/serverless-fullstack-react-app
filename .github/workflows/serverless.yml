name: Deploy Serverless

# Deployment Strategy:
# - All branches (except master) deploy to 'dev' stage
# - Master branch deploys to 'prod' stage

on:
  push:
    branches:
      - '**'  # All branches
  workflow_dispatch:

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    env:
      STAGE: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - name: serverless login
      uses: serverless/github-action@v4.0.0
      with:
        args: login
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
    - name: serverless validate
      uses: serverless/github-action@v4.0.0
      with:
        args: print
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
    - name: serverless deploy
      uses: serverless/github-action@v4.0.0
      with:
        args: deploy --stage ${{ env.STAGE }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
    - name: Test API
      run: |
        echo "Getting API endpoint for stage: ${{ env.STAGE }}"
        npx serverless info --stage ${{ env.STAGE }} --verbose
        ENDPOINT=$(npx serverless info --stage ${{ env.STAGE }} --verbose 2>&1 | grep -E "https://.*\.execute-api\..*\.amazonaws\.com/[^/]+" | grep -oE "https://[^/]+/[^/]+" | head -1)
        echo "Endpoint found: $ENDPOINT"
        if [ -z "$ENDPOINT" ]; then
          echo "ERROR: Could not extract API endpoint"
          exit 1
        fi
        chmod +x ./utils/test-api.sh
        API_ENDPOINT=$ENDPOINT ./utils/test-api.sh
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}

    - name: Build Frontend
      run: |
        # Get API endpoint for build
        API_ENDPOINT=$(npx serverless info --stage ${{ env.STAGE }} --verbose 2>&1 | grep -E "https://.*\.execute-api\..*\.amazonaws\.com/[^/]+" | grep -oE "https://[^/]+/[^/]+" | head -1)
        echo "Building with API endpoint: $API_ENDPOINT for stage: ${{ env.STAGE }}"
        cd client
        npm ci
        echo "NEXT_PUBLIC_API_URL=$API_ENDPOINT" > .env.production
        cat .env.production
        npm run build
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy Frontend to S3
      run: |
        echo "Getting stack outputs for stage: ${{ env.STAGE }}"
        npx serverless info --stage ${{ env.STAGE }} --verbose
        STACK_NAME=serverless-fullstack-react-app-${{ env.STAGE }}
        BUCKET_NAME=$(aws cloudformation describe-stacks --region us-east-1 --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='FrontendBucketName'].OutputValue" --output text)
        echo "Deploying to bucket: $BUCKET_NAME (stage: ${{ env.STAGE }})"
        if [ -z "$BUCKET_NAME" ]; then
          echo "ERROR: Could not get bucket name"
          exit 1
        fi
        aws s3 sync client/out s3://$BUCKET_NAME --delete --region us-east-1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}

    - name: Invalidate CloudFront Cache
      run: |
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --region us-east-1 --query "DistributionList.Items[?Origins.Items[?Id=='S3Origin']].Id" --output text)
        echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"
        if [ -z "$DISTRIBUTION_ID" ]; then
          echo "WARNING: Could not find CloudFront distribution, skipping cache invalidation"
        else
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Display URLs
      run: |
        echo "==================================="
        echo "Deployment Complete! (Stage: ${{ env.STAGE }})"
        echo "==================================="
        STACK_NAME=serverless-fullstack-react-app-${{ env.STAGE }}
        FRONTEND_URL=$(aws cloudformation describe-stacks --region us-east-1 --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='FrontendURL'].OutputValue" --output text)
        API_URL=$(aws cloudformation describe-stacks --region us-east-1 --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='ServiceEndpoint'].OutputValue" --output text)
        echo "Stage: ${{ env.STAGE }}"
        echo "Frontend URL: $FRONTEND_URL"
        echo "API Endpoint: $API_URL"
        echo "==================================="
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
