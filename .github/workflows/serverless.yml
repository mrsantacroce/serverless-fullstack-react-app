name: Deploy Serverless Resources and Frontend

# Deployment Strategy:
# - All branches (except master) deploy to 'dev' stage
# - Master branch deploys to 'prod' stage

on:
  push:
    branches:
      - '**'  # All branches
  workflow_dispatch:

jobs:
  test-unit:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    - name: Install Dependencies
      run: npm ci
    - name: Run Unit Tests
      run: npm test

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: test-unit
    env:
      STAGE: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
    outputs:
      api-endpoint: ${{ steps.get-endpoint.outputs.endpoint }}
      stage: ${{ env.STAGE }}
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    - name: Install Dependencies
      run: npm ci
    - name: serverless login
      uses: serverless/github-action@v4.0.0
      with:
        args: login
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
    - name: serverless validate
      uses: serverless/github-action@v4.0.0
      with:
        args: print
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
    - name: Deploy Serverless Backend
      uses: serverless/github-action@v4.0.0
      with:
        args: deploy --stage ${{ env.STAGE }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}

    - name: Get API Endpoint
      id: get-endpoint
      run: |
        ENDPOINT=$(npx serverless info --stage ${{ env.STAGE }} --verbose 2>&1 | grep -E "https://.*\.execute-api\..*\.amazonaws\.com/[^/]+" | grep -oE "https://[^/]+/[^/]+" | head -1)
        echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT
        echo "API Endpoint: $ENDPOINT"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}

  test-integration:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
    - uses: actions/checkout@v4
    - name: Run Integration Tests
      run: |
        ENDPOINT="${{ needs.deploy-backend.outputs.api-endpoint }}"
        echo "Testing API endpoint: $ENDPOINT"
        if [ -z "$ENDPOINT" ]; then
          echo "ERROR: Could not get API endpoint from deploy-backend job"
          exit 1
        fi
        chmod +x ./utils/*.sh
        API_ENDPOINT=$ENDPOINT ./utils/run-all-tests.sh

  build-frontend:
    name: Build & Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-backend, test-integration]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    - name: Build Frontend
      run: |
        API_ENDPOINT="${{ needs.deploy-backend.outputs.api-endpoint }}"
        echo "Building with API endpoint: $API_ENDPOINT for stage: ${{ needs.deploy-backend.outputs.stage }}"
        cd client
        npm ci
        echo "NEXT_PUBLIC_API_URL=$API_ENDPOINT" > .env.production
        cat .env.production
        npm run build

    - name: Deploy Frontend to S3
      run: |
        STAGE="${{ needs.deploy-backend.outputs.stage }}"
        echo "Deploying to stage: $STAGE"
        STACK_NAME=serverless-fullstack-react-app-$STAGE
        BUCKET_NAME=$(aws cloudformation describe-stacks --region us-east-1 --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='FrontendBucketName'].OutputValue" --output text)
        echo "Deploying to bucket: $BUCKET_NAME (stage: $STAGE)"
        if [ -z "$BUCKET_NAME" ]; then
          echo "ERROR: Could not get bucket name"
          exit 1
        fi
        aws s3 sync client/out s3://$BUCKET_NAME --delete --region us-east-1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}

    - name: Invalidate CloudFront Cache
      run: |
        STAGE="${{ needs.deploy-backend.outputs.stage }}"
        STACK_NAME=serverless-fullstack-react-app-$STAGE
        BUCKET_NAME=$(aws cloudformation describe-stacks --region us-east-1 --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='FrontendBucketName'].OutputValue" --output text)
        echo "Looking for CloudFront distribution for bucket: $BUCKET_NAME"

        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[?DomainName=='${BUCKET_NAME}.s3.amazonaws.com']].Id | [0]" --output text)
        echo "Found CloudFront distribution: $DISTRIBUTION_ID"

        if [ -z "$DISTRIBUTION_ID" ] || [ "$DISTRIBUTION_ID" = "None" ]; then
          echo "WARNING: Could not find CloudFront distribution for stage $STAGE, skipping cache invalidation"
        else
          echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Display Deployment Summary
      run: |
        STAGE="${{ needs.deploy-backend.outputs.stage }}"
        echo "==================================="
        echo "Deployment Complete! (Stage: $STAGE)"
        echo "==================================="
        STACK_NAME=serverless-fullstack-react-app-$STAGE
        FRONTEND_URL=$(aws cloudformation describe-stacks --region us-east-1 --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='FrontendURL'].OutputValue" --output text)
        echo "Stage: $STAGE"
        echo "Frontend URL: $FRONTEND_URL"
        echo "API Endpoint: ${{ needs.deploy-backend.outputs.api-endpoint }}"
        echo "==================================="
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
